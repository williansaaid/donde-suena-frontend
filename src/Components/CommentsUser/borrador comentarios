import { useEffect, useState } from "react";
import {createComment, deleteComment, updateComment, } from "../../Redux/Slices/Comments/commentsAction";
import { getComments } from "./getComments";
import { Comment } from "./Comment";
import { CommentForm} from "./CommentForm"

export const Comments = ({id}) =>{

  const [backendComments , setBackendComments]= useState([])
  //en la proxima funcion seteamos el estado para luego ser editado
  const [activeComment , setActiveComment]=useState (null)
  // aca manejamos el comentario raiz y luego renderizamos sus respuestas  sabemos que es el comentario raiz por que el parent id es null
  const rootComments =backendComments.filter(
    (backendComment)=> backendComment.parentId===null
  );

  //Para hacer las respuestas tenemos que recordar que los nuevos comentarios siempre se guardan arriba , pero en cambio cuando hacemos una respuesta los comentarios nuevos se guardaran abajo , por lo tanto hacemos esa logica con un filter para que las respuestas se generen abajo.
  const getReplies= commentId =>{
    return backendComments.filter(backendComments=>backendComments.parentId===commentId).sort((a,b) => new Date(a.createdAt).getTime()  - new Date(b.createdAt).getTime()) //con el sort ordeno en ascendente
  }
  //agrego los comentarios del form a los que ya estan
  const addComment =(text , parentId) =>{
    // console.log ("addComment", text , parentId)
    createComment(text, parentId).then(comment =>{
      setBackendComments([comment,...backendComments])
      setActiveComment(null)
    })
  }
const eliminateComment =(commentId) =>{
  if(window.confirm("Seguro que quieres eliminar el comentario?")){
    deleteComment(commentId).then(()=>{
      const updatedBackendComments = backendComments.filter(
        (backendComment)=>backendComment.id !== commentId
      );
        setBackendComments(updatedBackendComments)
    })
  }
}
const  modifyComment = (text , commentId) =>{
  updateComment(text , commentId).then(() =>{
    const updatedBackendComments =backendComments.map(backendComment=>{
      if (backendComment.id ===commentId){
        return { ...backendComment , body:text}
    }
    return backendComment
   } )
   setBackendComments(updatedBackendComments)
   setActiveComment (null)
  })
}

  useEffect(()=>{
      getComments().then((data)=>{
        setBackendComments(data)
      });
  },  [] ) ;
  return (

    <div className="comments">


      <CommentForm submitLabel="Enviar" handleSubmit={addComment}/>
      <div className="comments-container">
    {rootComments.map((rootComment)=>(
   <Comment
   key={rootComment.id}
   comment ={rootComment}
   replies ={getReplies(rootComment.id)}
   currentUserId={id}
   addComment={addComment}
   eliminateComment={eliminateComment}
   activeComment  ={activeComment}
   setActiveComment={setActiveComment}
   modifyComment={modifyComment}

   />
   //no es ideal llamar una funcion en el hecho pero al tener una pagina con pocos comentarios no hay problema
    ))}
      </div>
    </div>
  )
}
export default Comments;
